{"version":3,"sources":["contexts/ScreenDimensions.js","contexts/ContextProvider.js","components/MainMenu.js","components/ScreenCalibration.js","components/Templates/ActivityMainMenuTemplate.js","components/FingerCalibration/FingerCalibrationMainMenu.js","components/Templates/ActivityTemplate.js","components/PointGenerator.js","images/trash.svg","images/checkSquare.svg","components/Templates/EndGameTemplate.js","components/FingerCalibration/FingerCalibrationActivity.js","components/MainTask/MainTaskMainMenu.js","components/MainTask/MainTaskActivity.js","App.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","shuffle","ContextProvider","React","createContext","useAuth","useContext","array","i","length","splice","Math","floor","random","AuthProvider","children","useState","loading","setLoading","username","setUsername","age","setAge","targetButtonRadius","setTargetButtonRadius","distanceRadius","setDistanceRadius","fingerRadioSelection","setFingerRadioSelection","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","getCanvasCoordinates","canvasMargin","RandomPoint","prevPoint","xranges","yranges","x","y","undefined","limiter","getDistance","aX","aY","bX","bY","dx","abs","dy","sqrt","value","scoreBoardHeight","scoreBoardBorderWidth","maxScore","canvasPadding","RandomPointAtDistance","randomRange","Array","keys","angle","next","cos","PI","sin","console","log","fround","copyFromLastSaved","localStorage","saveData","Provider","MainMenu","history","useHistory","className","onClick","push","ScreenCalibration","ActivityMainMenuTemplate","nextTaskPath","inputFieldsData","map","data","onChange","e","target","FormControl","component","RadioGroup","row","aria-label","name","defaultValue","FormControlLabel","control","Radio","color","label","labelPlacement","FingerCalibrationMainMenu","setValue","ActivityTemplate","currScore","totalScore","handleClick","exceptCanvasHeight","id","style","borderBottom","padding","margin","onMouseDown","PointGenerator","posX","posY","radius","clickFunction","pointStyle","left","top","border","backgroundColor","EndGameTemplate","taskTitle","playerScore","averageTime","downloadData","avgWindow","toFixed","csvStr","objArray","JSON","parse","str","Object","join","line","index","convertToCSV","encodedUri","encodeURI","replace","link","document","createElement","setAttribute","body","appendChild","click","src","checkSquare","trash","FingerCalibrationActivity","setCurrScore","setTotalScore","currentPoint","setPosX","setPosY","gameOver","setGameOver","collectedData","setCollectedData","addData","event","hitVal","dist","clientX","clientY","tempData","getElementById","setTimeout","error","point","cancelBubble","stopPropagation","MainTaskMainMenu","MainTaskActivity","currentPoint1","currentPoint2","pos1X","setPos1X","pos1Y","setPos1Y","pos2X","setPos2X","pos2Y","setPos2Y","touch1","setTouch1","setAverageTime","prevTimestamp","setPrevTimestamp","duration","finalTouchEvent","display","timeStamp","point1","point2","App","path","exact","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.81ccdde4.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import React, { useContext, useState, useEffect } from \"react\"\nimport useWindowDimensions from \"./ScreenDimensions\"\n\nconst ContextProvider = React.createContext()\n\nexport function useAuth() {\n  return useContext(ContextProvider)\n}\n\n\nfunction getAngleFromX(radius, center, x){\n  let angle = (180 * Math.acos( ( (x - center[0]) / radius) ))/Math.PI;\n  if(angle){\n    return [angle, 360-angle];\n  }\n  return [];\n}\n\nfunction getAngleFromY(radius, center, y){\n  let angle = (180 * Math.asin((y - center[1]) / radius))/Math.PI;\n  if(angle){\n    if(angle > 0){\n      return [angle, 180 - angle];\n    }\n    return [360 + angle, 180 - angle];\n  }\n  return [];\n}\n\nfunction* shuffle(array) {\n\n  var i = array.length;\n\n  while (i--) {\n      yield array.splice(Math.floor(Math.random() * (i+1)), 1)[0];\n  }\n\n}\n\nfunction betweenAvoidingRange (avoidingRanges, angle){\n  avoidingRanges.forEach(element => {\n    if(angle > Math.min(...element) && angle < Math.max(...element))  return true;\n  });\n  return false\n}\n\nexport function AuthProvider({ children }) {\n  //#region Variable and Constants\n  const scoreBoardHeight = 60;\n  const scoreBoardBorderWidth = 1;\n  const maxScore = 15;\n  const canvasMargin = 16;\n  const canvasPadding = 8;\n  const minDistance = 50;\n  const [loading, setLoading] = useState(false)\n  const [username, setUsername] = useState(\"\")\n  const [age, setAge] = useState(0)\n  const [targetButtonRadius, setTargetButtonRadius] = useState(25)\n  const [distanceRadius, setDistanceRadius] = useState(70)\n  const [fingerRadioSelection, setFingerRadioSelection] = useState(\"NT\")\n  const {height, width} = useWindowDimensions()\n  //#endregion\n\n  //#region Randomisation Functions\n  const getCanvasCoordinates= () => {\n    const xranges = [canvasMargin + canvasPadding,  width - (canvasMargin + canvasPadding + (2*targetButtonRadius))];\n    const yranges = [canvasMargin + canvasPadding + scoreBoardHeight + scoreBoardBorderWidth,  height - (canvasMargin + canvasPadding + (2*targetButtonRadius))];\n    return [xranges, yranges];\n  }\n  \n  const RandomPoint = (prevPoint) => {\n    const [xranges, yranges] = getCanvasCoordinates();\n    let x = (Math.random() * (xranges[1] - xranges[0]) )+ xranges[0];\n    let y = (Math.random() * (yranges[1] - yranges[0]) )+ yranges[0];\n    if(prevPoint != undefined){\n      let limiter = 40;\n      while(getDistance(prevPoint[0], prevPoint[1], x, y) < minDistance + targetButtonRadius && limiter>0){\n        x = (Math.random() * (xranges[1] - xranges[0]) )+ xranges[0];\n        y = (Math.random() * (yranges[1] - yranges[0]) )+ yranges[0];\n        limiter--;\n      }\n    }\n    return [x,y];\n  }\n  \n  const RandomPointAtDistance = (prevPoint) => {\n    const [xranges, yranges] = getCanvasCoordinates();\n    if(prevPoint != undefined){\n      //#region Arc Randomisation Method\n      // let avoidingRanges = [];\n      // if(prevPoint[0] - distanceRadius < xranges[0]){\n      //   let angleRanges = getAngleFromX(targetButtonRadius, prevPoint, xranges[0])\n      //   if(angleRanges.length > 0)  avoidingRanges.push(angleRanges)\n      // }\n      // if(prevPoint[0] + distanceRadius > xranges[1]){\n      //   let angleRanges = getAngleFromX(targetButtonRadius, prevPoint, xranges[1])\n      //   if(angleRanges.length > 0)  avoidingRanges.push(angleRanges)\n      // }\n      // if(prevPoint[1] - distanceRadius < yranges[0]){\n      //   let angleRanges = getAngleFromY(targetButtonRadius, prevPoint, yranges[0])\n      //   if(angleRanges.length > 0)  avoidingRanges.push(angleRanges)\n      // }\n      // if(prevPoint[1] + distanceRadius > yranges[1]){\n      //   let angleRanges = getAngleFromY(targetButtonRadius, prevPoint, yranges[1])\n      //   if(angleRanges.length > 0)  avoidingRanges.push(angleRanges)\n      // }\n      // console.log(\"avoidingRanges : \", avoidingRanges)\n\n      // let angle = Math.random() * (360);\n      // let limiter = 50;\n      // while(betweenAvoidingRange(avoidingRanges, angle) && limiter > 0){\n      //   angle = Math.random() * 360;\n      //   limiter--;\n      // }\n      // let x = ((Math.cos(angle * Math.PI / 180))* distanceRadius) + prevPoint[0];\n      // let y = ((Math.cos(angle * Math.PI / 180))* distanceRadius) + prevPoint[0];\n      // console.log(getDistance(x,y,prevPoint[0], prevPoint[1]) == distanceRadius)\n      // return [x,y];\n      //#endregion\n\n      //#region Randomisation Normal\n      let randomRange = shuffle([...Array(360).keys()])\n      let angle = randomRange.next().value;\n      \n      let x = ((Math.cos(angle * Math.PI / 180))* distanceRadius) + prevPoint[0];\n      let y = ((Math.sin(angle * Math.PI / 180))* distanceRadius) + prevPoint[1];\n      let limiter=300;\n      let luckyCharm = Math.floor(Math.random() * 10 + 1);\n      while((x >= xranges[1] || x <= xranges[0] || y <= yranges[0] || y >= yranges[1])&& limiter > 0){\n        // angle += (Math.random() * 200 + 1);\n        angle = randomRange.next().value;\n        x = ((Math.cos(angle * Math.PI / 180))* distanceRadius) + prevPoint[0];\n        y = ((Math.sin(angle * Math.PI / 180))* distanceRadius) + prevPoint[1];\n        limiter--;\n      }\n      console.log(Math.fround(getDistance(x,y,prevPoint[0], prevPoint[1]))  == distanceRadius)\n      return [x,y];\n      //#endregion\n\n    }else{\n      console.log(\"prevPoint Not found\")\n      return RandomPoint();\n    }\n  }\n  //#endregion\n\n  //#region Useful Functions\n  const getDistance = (aX, aY, bX, bY) => {\n    let dx = Math.abs(aX - bX)\n    let dy = Math.abs(aY - bY)\n    return Math.sqrt( (dx*dx) + (dy*dy))\n  }\n  const saveData = () =>{\n    localStorage['username'] = username\n    localStorage['age'] = age\n    localStorage['targetButtonRadius'] = targetButtonRadius\n    localStorage['distanceRadius'] = distanceRadius\n    localStorage['fingerRadioSelection'] = fingerRadioSelection\n  }\n\n  const copyFromLastSaved = () => {\n    setUsername(localStorage['username'] || \"\")\n    setAge(localStorage['age'] || 0)\n    setTargetButtonRadius(localStorage['targetButtonRadius'] || 25)\n    setDistanceRadius(localStorage['distanceRadius'] || 70)\n    setFingerRadioSelection(localStorage['fingerRadioSelection'] || \"NT\")\n  }\n  //#endregion\n\n  const value = {\n    scoreBoardHeight,\n    scoreBoardBorderWidth,\n    maxScore,\n    canvasMargin,\n    canvasPadding,\n    username,\n    age,\n    targetButtonRadius,\n    distanceRadius,\n    fingerRadioSelection,\n    getDistance,\n    setLoading,\n    setUsername,\n    setAge,\n    setTargetButtonRadius,\n    setDistanceRadius,\n    setFingerRadioSelection,\n    RandomPoint,\n    RandomPointAtDistance,\n    copyFromLastSaved,\n    saveData\n  }\n\n  return (\n    <ContextProvider.Provider value={value}>\n      {!loading && children}\n    </ContextProvider.Provider>\n  )\n}\n","import React from 'react'\r\nimport { useHistory } from 'react-router'\r\n\r\nfunction MainMenu() {\r\n    const history = useHistory();\r\n    return (\r\n        <div className=\"main-menu-wrapper\">\r\n            <div className=\"options-button-wrapper\" onClick={() => history.push(\"/finger-calibration\")}>\r\n                finger calibration\r\n            </div>\r\n            <div className=\"options-button-wrapper\" onClick={() => history.push(\"/main-task\")}>\r\n                main task\r\n            </div>\r\n            <div className=\"options-button-wrapper\" onClick={() => history.push(\"/screen-calibration\")}>\r\n                screen calibration\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainMenu\r\n","import React from 'react'\r\n\r\nfunction ScreenCalibration() {\r\n    return <div className=\"screen-calibration-wrapper\"><div className=\"calibration-box\"></div></div>\r\n}\r\n\r\nexport default ScreenCalibration\r\n","import React from 'react'\r\nimport { useAuth } from '../../contexts/ContextProvider'\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { useHistory } from 'react-router';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction ActivityMainMenuTemplate({nextTaskPath, inputFieldsData}) {\r\n    const history = useHistory()\r\n    const {setFingerRadioSelection, copyFromLastSaved, fingerRadioSelection} = useAuth();\r\n    return (\r\n    <div className=\"details-menu-wrapper\">\r\n        {\r\n            inputFieldsData.map((data) => \r\n            <div className=\"input-field-wrapper\">\r\n                <div className=\"field-label\">{data['label']}</div>\r\n                <div className=\"input-field\"><input value={data['value']} onChange={(e) => data['setValue'](e.target.value)}/></div>\r\n            </div>\r\n            )\r\n        }\r\n        <div className=\"radio-button-wrapper\">\r\n            <FormControl component=\"fieldset\">\r\n                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue={fingerRadioSelection} onChange={(e) => setFingerRadioSelection(e.target.value)}>\r\n                    <FormControlLabel\r\n                    value=\"NT\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"NT\"\r\n                    labelPlacement=\"top\"\r\n                    />\r\n                    <FormControlLabel\r\n                    value=\"DT\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"DT\"\r\n                    labelPlacement=\"top\"\r\n                    />\r\n                    <FormControlLabel\r\n                    value=\"NF\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"NF\"\r\n                    labelPlacement=\"top\"\r\n                    />\r\n                    <FormControlLabel\r\n                    value=\"DF\"\r\n                    control={<Radio color=\"primary\" />}\r\n                    label=\"DF\"\r\n                    labelPlacement=\"top\"\r\n                    />\r\n                    \r\n                </RadioGroup>\r\n            </FormControl>\r\n        </div>\r\n        <div className=\"copy-button-wrapper\" onClick={() => copyFromLastSaved()}>copy from last experiment</div>\r\n        <div className=\"start-button-wrapper\" onClick={() => history.push(nextTaskPath)}>start</div>\r\n    </div>)\r\n}\r\n\r\nActivityMainMenuTemplate.propTypes = {\r\n\r\n}\r\n\r\nexport default ActivityMainMenuTemplate\r\n","import React from 'react'\r\nimport { useAuth } from '../../contexts/ContextProvider'\r\nimport ActivityMainMenuTemplate from '../Templates/ActivityMainMenuTemplate';\r\n\r\n\r\nfunction FingerCalibrationMainMenu() {\r\n    const {username, setUsername} = useAuth();\r\n    const {age, setAge} = useAuth();\r\n    const {targetButtonRadius, setTargetButtonRadius} = useAuth();\r\n    const inputFieldsData = [\r\n        {label : \"Username\", value:username, setValue: setUsername},\r\n        {label : \"Age\", value:age, setValue: setAge},\r\n        {label : \"Target Button Radius\", value:targetButtonRadius, setValue: setTargetButtonRadius},\r\n    ]\r\n    return (\r\n        <ActivityMainMenuTemplate inputFieldsData={inputFieldsData} nextTaskPath=\"/finger-calibration-activity\"/>\r\n    )\r\n}\r\n\r\nexport default FingerCalibrationMainMenu\r\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useAuth } from '../../contexts/ContextProvider';\r\n\r\n\r\nfunction ActivityTemplate({currScore, totalScore, children, handleClick}) {\r\n    const {canvasMargin, canvasPadding, scoreBoardHeight,scoreBoardBorderWidth, saveData} = useAuth()\r\n    const exceptCanvasHeight = scoreBoardHeight + (2 * (canvasMargin + canvasPadding)) + scoreBoardBorderWidth;\r\n\r\n    useEffect(() => saveData(), [])\r\n    \r\n    return (\r\n        <div id=\"activity-wrapper\">\r\n            <div className=\"score-board\" style={{borderBottom:scoreBoardBorderWidth + \"px solid black\"}}>\r\n                {currScore} / {totalScore} &emsp;\r\n            </div>\r\n            <div id=\"canvas\" style={{\r\n                    padding: \"8px\",\r\n                    margin: \"16px\",\r\n                    height: \"calc(100vh - \"+ exceptCanvasHeight +\"px)\"\r\n            }} onMouseDown={handleClick}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nActivityTemplate.propTypes = {\r\n    currScore : PropTypes.number.isRequired,\r\n    totalScore: PropTypes.number.isRequired,\r\n    children: PropTypes.any\r\n}\r\n\r\nexport default ActivityTemplate\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useAuth } from '../contexts/ContextProvider';\r\n\r\nfunction PointGenerator({posX, posY, radius, color, clickFunction, id}) {\r\n    const {targetButtonRadius} = useAuth()\r\n    const pointStyle = {\r\n      width: targetButtonRadius*2 + \"px\",\r\n      height: targetButtonRadius*2 + \"px\",\r\n      left: (posX) + \"px\",  \r\n      top: (posY) + \"px\",\r\n      border: \"0.1px solid\",\r\n      backgroundColor: color,\r\n    };\r\n    return (\r\n      <div className=\"point-wrapper\" id={id} style={pointStyle} onMouseDown={clickFunction}/>\r\n    );\r\n}\r\n\r\nPointGenerator.propTypes = {\r\n\r\n}\r\n\r\nexport default PointGenerator\r\n","export default __webpack_public_path__ + \"static/media/trash.6dba31e5.svg\";","export default __webpack_public_path__ + \"static/media/checkSquare.5493682c.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport trash from \"../../images/trash.svg\"\r\nimport checkSquare from \"../../images/checkSquare.svg\"\r\nimport { useAuth } from '../../contexts/ContextProvider'\r\nimport { useHistory } from 'react-router'\r\n\r\nfunction EndGameTemplate({taskTitle, playerScore, totalScore, averageTime, downloadData, avgWindow}) {\r\n    const {username, age, targetButtonRadius,fingerRadioSelection, distanceRadius } = useAuth()\r\n    const history = useHistory()\r\n    console.log(averageTime)\r\n    function convertToCSV(objArray) {\r\n        var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\r\n        var str = Object.keys(array[0]).join(',');\r\n        str=str+'\\r\\n';\r\n      \r\n        for (var i = 0; i < array.length; i++) {\r\n          var line = '';\r\n          for (var index in array[i]) {\r\n            if (line != '') line += ','\r\n            line += array[i][index];\r\n          }\r\n          str += line + '\\r\\n';\r\n        }\r\n        return str;\r\n    }\r\n      \r\n    const downloadClick = () =>{\r\n        console.log(\"Download Data\")\r\n        let csvStr = convertToCSV(downloadData)\r\n        let csvContent = \"data:text/csv;charset=utf-8,\"+csvStr\r\n        var encodedUri = encodeURI(csvContent);\r\n        var name = taskTitle.replace(\" \",\"\") + \"_\" + username +\"_\" + age + \"_\" + targetButtonRadius;\r\n        if(taskTitle === \"Main Task\"){\r\n            name  = name + \"_\" + distanceRadius;\r\n        }\r\n        name = name + \"_\" + fingerRadioSelection\r\n        var link = document.createElement(\"a\");\r\n        link.setAttribute(\"href\", encodedUri);\r\n        link.setAttribute(\"download\", name + \".csv\");\r\n        document.body.appendChild(link); \r\n        link.click();\r\n    }\r\n    const deleteClick = () =>{\r\n        console.log(\"Delete Data\")\r\n        history.push(\"/\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"end-game-wrapper\">\r\n            <div className=\"task-title\">{taskTitle}</div>\r\n            <div className=\"score-container\">\r\n                <div className=\"your-score-wrapper\">your score</div> \r\n                <div className=\"score-wrapper\">{playerScore} / {totalScore}</div> \r\n            </div>\r\n            {\r\n                avgWindow \r\n                ? \r\n                <div className=\"average-score-container\">\r\n                    <div className=\"average-score-title-wrapper\">average time per trial</div> \r\n                    <div className=\"average-score-wrapper\">{averageTime.toFixed(3)} sec</div> \r\n                </div>\r\n                :\"\"\r\n            }\r\n            \r\n            <div className=\"buttons-container\">\r\n                <div className=\"download-data-button\" onClick={downloadClick}><img src={checkSquare}/>&emsp;Download</div>\r\n                <div className=\"delete-data-button\" onClick={deleteClick}><img src={trash}/>&emsp;Delete</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nEndGameTemplate.propTypes = {\r\n\r\n}\r\n\r\nexport default EndGameTemplate\r\n","import React, { useState } from 'react'\r\nimport { useAuth } from '../../contexts/ContextProvider';\r\nimport ActivityTemplate from '../Templates/ActivityTemplate';\r\nimport PointGenerator from '../PointGenerator';\r\nimport EndGameTemplate from '../Templates/EndGameTemplate';\r\n\r\nfunction FingerCalibrationActivity() {\r\n    const [currScore, setCurrScore] = useState(0);\r\n    const [totalScore, setTotalScore] = useState(0);\r\n    const {RandomPoint, maxScore, getDistance} = useAuth()\r\n    const currentPoint = RandomPoint()\r\n    const [posX, setPosX] = useState(currentPoint[0])\r\n    const [posY, setPosY] = useState(currentPoint[1])\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const [collectedData, setCollectedData] = useState([])\r\n\r\n    const addData = (event, hitVal) => {\r\n        //#region Add Data to store current Progress\r\n        const dist = getDistance(posX, posY, event.clientX, event.clientY)\r\n        let tempData = {\r\n            'TrialNo': totalScore+1,\r\n            'target_x': posX,\r\n            'target_y': posY,\r\n            'touch_x': event.clientX,\r\n            'touch_y': event.clientY,\r\n            'hit': hitVal,\r\n            'distance': dist\r\n        }\r\n        setCollectedData(collectedData => [...collectedData, tempData])\r\n        //#endregion\r\n    }\r\n\r\n    const handlePointClick = (event) => {\r\n        event.cancelBubble = true;\r\n        if(event.stopPropagation) event.stopPropagation();\r\n        if(gameOver) return;\r\n        \r\n        //#region Change Color\r\n        try {\r\n            document.getElementById(\"activity-wrapper\").style.backgroundColor = \"#4FC53C\";\r\n            setTimeout(() => {\r\n                try {\r\n                    document.getElementById(\"activity-wrapper\").style.backgroundColor = \"white\";\r\n                } catch (error) {\r\n                    \r\n                }\r\n            }, 800)\r\n        } catch (error) {\r\n        }\r\n        //#endregion\r\n        \r\n        if(totalScore + 1 == maxScore){\r\n            addData(event, true)\r\n            setCurrScore(currScore+1)\r\n            setTotalScore(totalScore+1)\r\n            setGameOver(true)\r\n        }else{\r\n            addData(event, true)\r\n            let point = RandomPoint([posX, posY])\r\n            setPosX(point[0])\r\n            setPosY(point[1])\r\n            setCurrScore(currScore+1)\r\n            setTotalScore(totalScore+1)\r\n        }\r\n    }\r\n\r\n    const handleCanvasClick = (event) =>{\r\n        if(gameOver) return;\r\n        //#region Change Color\r\n        try {\r\n            document.getElementById(\"activity-wrapper\").style.backgroundColor = \"#FF4B4B\";\r\n            setTimeout(() => {\r\n                try {\r\n                    document.getElementById(\"activity-wrapper\").style.backgroundColor = \"white\";\r\n                } catch (error) {\r\n                    \r\n                }\r\n                \r\n            }, 800)\r\n        } catch (error) {\r\n        }\r\n        //#endregion\r\n        \r\n        if(totalScore + 1 == maxScore){\r\n            addData(event, false)\r\n            setTotalScore(totalScore+1)\r\n            setGameOver(true)\r\n        }else{\r\n            addData(event, false)\r\n            let point = RandomPoint([posX, posY])\r\n            setPosX(point[0])\r\n            setPosY(point[1])\r\n            setTotalScore(totalScore+1)\r\n        }\r\n        \r\n    }\r\n\r\n    if(gameOver){\r\n        return(\r\n            <EndGameTemplate taskTitle=\"Finger Calibration\"  playerScore={currScore} \r\n                totalScore={totalScore} downloadData={collectedData}/>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <ActivityTemplate currScore={currScore} totalScore={totalScore} handleClick={handleCanvasClick}>\r\n            <PointGenerator posX={posX} posY={posY} clickFunction={handlePointClick}/>\r\n        </ActivityTemplate>)\r\n}\r\n\r\nexport default FingerCalibrationActivity\r\n","import React from 'react'\r\nimport { useAuth } from '../../contexts/ContextProvider'\r\nimport ActivityMainMenuTemplate from '../Templates/ActivityMainMenuTemplate';\r\n\r\nfunction MainTaskMainMenu() {\r\n    const {username, setUsername} = useAuth();\r\n    const {age, setAge} = useAuth();\r\n    const {targetButtonRadius, setTargetButtonRadius} = useAuth();\r\n    const {distanceRadius, setDistanceRadius} = useAuth();\r\n    const inputFieldsData = [\r\n        {label : \"Username\", value:username, setValue: setUsername},\r\n        {label : \"Age\", value:age, setValue: setAge},\r\n        {label : \"Target Button Radius\", value:targetButtonRadius, setValue: setTargetButtonRadius},\r\n        {label : \"Distance Radius\", value:distanceRadius, setValue: setDistanceRadius},\r\n    ]\r\n    return (\r\n        <ActivityMainMenuTemplate inputFieldsData={inputFieldsData} nextTaskPath=\"/main-task-activity\"/>\r\n    )\r\n}\r\n\r\nexport default MainTaskMainMenu\r\n","import React, { useState } from 'react'\r\nimport { useAuth } from '../../contexts/ContextProvider';\r\nimport ActivityTemplate from '../Templates/ActivityTemplate';\r\nimport PointGenerator from '../PointGenerator';\r\nimport EndGameTemplate from '../Templates/EndGameTemplate';\r\n\r\n\r\nfunction MainTaskActivity() {\r\n    const [currScore, setCurrScore] = useState(0);\r\n    const [totalScore, setTotalScore] = useState(0);\r\n    const {RandomPoint, maxScore, getDistance, RandomPointAtDistance} = useAuth()\r\n    const currentPoint1 = RandomPoint()\r\n    const currentPoint2 = RandomPointAtDistance(currentPoint1)\r\n    const [pos1X, setPos1X] = useState(currentPoint1[0])\r\n    const [pos1Y, setPos1Y] = useState(currentPoint1[1])\r\n    const [pos2X, setPos2X] = useState(currentPoint2[0])\r\n    const [pos2Y, setPos2Y] = useState(currentPoint2[1])\r\n    const [touch1, setTouch1] = useState([])\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const [collectedData, setCollectedData] = useState([])\r\n    const [averageTime, setAverageTime] = useState(0)\r\n    const [prevTimestamp, setPrevTimestamp] = useState(0)\r\n\r\n    const addData = (duration, hitVal, finalTouchEvent) => {\r\n        //#region Add Data to store current Progress\r\n        let tempData = {\r\n            'TrialNo': totalScore+1,\r\n            'start_target_x':pos1X,\r\n            'start_target_y':pos1Y,\r\n            'start_touch_x':touch1[0],\r\n            'start_touch_y':touch1[1],\r\n            'end_target_x': pos2X,\r\n            'end_target_y':pos2Y,\r\n            'end_touch_x':finalTouchEvent.clientX * 1.0,\r\n            'end_touch_y':finalTouchEvent.clientY * 1.0,\r\n            'hit': hitVal,\r\n            'Duration':duration,\r\n        }\r\n        setCollectedData(collectedData => [...collectedData, tempData])\r\n        //#endregion\r\n    }\r\n\r\n    const handlePointClick1 = (event) => {\r\n        event.cancelBubble = true;\r\n        if(event.stopPropagation) event.stopPropagation();\r\n        if(gameOver) return;\r\n        setPrevTimestamp(event.timeStamp)\r\n        setTouch1([event.clientX, event.clientY])\r\n        //#region Change Color\r\n        try {\r\n            document.getElementById(\"point1\").style.display = \"none\";\r\n            document.getElementById(\"point2\").style.backgroundColor = \"black\";\r\n        } catch (error) {\r\n        }\r\n        //#endregion\r\n        \r\n    }\r\n\r\n    const handlePointClick2 = (event) => {\r\n        event.cancelBubble = true;\r\n        if(event.stopPropagation) event.stopPropagation();\r\n        if(gameOver) return;\r\n\r\n        const duration = event.timeStamp - prevTimestamp\r\n        setAverageTime(averageTime + duration)\r\n        //#region Change Color\r\n        try {\r\n            document.getElementById(\"point2\").style.display = \"none\";\r\n            document.getElementById(\"activity-wrapper\").style.backgroundColor = \"#4FC53C\";\r\n            setTimeout(() => {\r\n                try {\r\n                    document.getElementById(\"activity-wrapper\").style.backgroundColor = \"white\";\r\n                    document.getElementById(\"point1\").style.display = \"block\";\r\n                    document.getElementById(\"point2\").style.display = \"block\";\r\n                    document.getElementById(\"point2\").style.backgroundColor = \"white\";\r\n                } catch (error) {\r\n                    \r\n                }\r\n            }, 500)\r\n        } catch (error) {\r\n        }\r\n        //#endregion\r\n        \r\n\r\n        if(totalScore + 1 == maxScore){\r\n            addData(duration, true, event)\r\n            setCurrScore(currScore+1)\r\n            setTotalScore(totalScore+1)\r\n            setGameOver(true)\r\n        }else{\r\n            addData(duration, true, event)\r\n            let point1 = RandomPoint()\r\n            let point2 = RandomPointAtDistance(point1)\r\n            setPos1X(point1[0])\r\n            setPos1Y(point1[1])\r\n            setPos2X(point2[0])\r\n            setPos2Y(point2[1])\r\n            setCurrScore(currScore+1)\r\n            setTotalScore(totalScore+1)\r\n        }\r\n    }\r\n\r\n    const handleCanvasClick = (event) =>{\r\n        if(gameOver) return;\r\n        if(document.getElementById(\"point1\").style.display != \"none\"){\r\n            return\r\n        }\r\n        const duration = event.timeStamp - prevTimestamp\r\n        setAverageTime(averageTime + duration)\r\n        //#region Change Color\r\n        try {\r\n            document.getElementById(\"activity-wrapper\").style.backgroundColor = \"#FF4B4B\";\r\n            document.getElementById(\"point2\").style.display = \"none\";\r\n            setTimeout(() => {\r\n                try {\r\n                    document.getElementById(\"activity-wrapper\").style.backgroundColor = \"white\";\r\n                    document.getElementById(\"point1\").style.display = \"block\";\r\n                    document.getElementById(\"point2\").style.display = \"block\";\r\n                    document.getElementById(\"point2\").style.backgroundColor = \"white\";\r\n                } catch (error) {\r\n                    \r\n                }\r\n                \r\n            }, 800)\r\n        } catch (error) {\r\n        }\r\n        //#endregion\r\n        \r\n        if(totalScore + 1 == maxScore){\r\n            addData(duration, false, event)\r\n            setTotalScore(totalScore+1)\r\n            setGameOver(true)\r\n        }else{\r\n            addData(duration, false, event)\r\n            let point1 = RandomPoint()\r\n            let point2 = RandomPointAtDistance(point1)\r\n            setPos1X(point1[0])\r\n            setPos1Y(point1[1])\r\n            setPos2X(point2[0])\r\n            setPos2Y(point2[1])\r\n            setTotalScore(totalScore+1)\r\n        }\r\n        \r\n    }\r\n\r\n    if(gameOver){\r\n        return(\r\n            <EndGameTemplate taskTitle=\"Main Task\"  playerScore={currScore} \r\n                totalScore={totalScore} downloadData={collectedData}  avgWindow={true} averageTime={averageTime/ (maxScore * 1000)}/>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <ActivityTemplate currScore={currScore} totalScore={totalScore} handleClick={handleCanvasClick}>\r\n            <PointGenerator posX={pos1X} posY={pos1Y} clickFunction={handlePointClick1} id={\"point1\"}/>\r\n            <PointGenerator posX={pos2X} posY={pos2Y} clickFunction={handlePointClick2} color={\"white\"} id={\"point2\"}/>\r\n        </ActivityTemplate>)\r\n\r\n}\r\n\r\nexport default MainTaskActivity\r\n","import './App.css';\nimport { BrowserRouter as Router, Route, useHistory } from \"react-router-dom\";\nimport {AuthProvider} from \"./contexts/ContextProvider\"\nimport MainMenu from './components/MainMenu';\nimport ScreenCalibration from './components/ScreenCalibration';\nimport FingerCalibrationMainMenu  from './components/FingerCalibration/FingerCalibrationMainMenu';\nimport FingerCalibrationActivity  from './components/FingerCalibration/FingerCalibrationActivity';\nimport MainTaskMainMenu from './components/MainTask/MainTaskMainMenu';\nimport MainTaskActivity from './components/MainTask/MainTaskActivity'\nimport EndGameTemplate from './components/Templates/EndGameTemplate';\n\nfunction App() {\n  return (\n    <>\n      <AuthProvider>\n        <Router history={useHistory()}>    \n          <Route path=\"/\" exact component={MainMenu}/>\n          <Route path=\"/screen-calibration\" component={ScreenCalibration}/>\n          <Route path=\"/main-task\" component={MainTaskMainMenu}/>\n          <Route path=\"/main-task-activity\" component={MainTaskActivity}/>\n          <Route path=\"/finger-calibration\" component={FingerCalibrationMainMenu}/>\n          <Route path=\"/finger-calibration-activity\" component={FingerCalibrationActivity}/>\n          <Route path=\"/end-game\" component={EndGameTemplate}/>\n        </Router>\n      </AuthProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}